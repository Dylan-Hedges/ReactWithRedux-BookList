import React, {Component} from 'react';
//Connects mapStateToProps and Component (BookList) - Imports only the "connect" property (a function) from 'react-redux' that allows us to connect React and Redux
import { connect } from 'react-redux';
//Imports Action Creator "selectBook"
import { selectBook } from '../actions/index';
//Makes sure Actions flow through Reducers - A function that makes sure the Action generated by the Action Creator flows through the different reducers
import { bindActionCreators } from 'redux';

//Creates class component BookList
class BookList extends Component {
    //Builds book list
    renderList(){
        //Gets book titles - Refers to books object from the mapStateToProps (as this.props.books), Loops (using .map) through the array of books and returns titles as an <li> (for use in the <ul> below), remember we need a key as a unique identifier for each item in the list
        return this.props.books.map((book) => {
            return (
                <li 
                key={book.title} 
                onClick={() => this.props.selectBook(book)}
                className="list-group-item">
                {book.title}
                </li>
            
            );
        });    
    }
    
    //Displays book list on page - when we reference other functions (renderList) or variables in our JSX we use {}
    render() {
        return (
            <ul className="list-group col-sm-4">
                {this.renderList()}
            </ul>
        )
    }
}

//Maps state to Container - Takes a specific part of the Apps state and passes it to  the component (BooksList) - Takes application state (array of books + selected book etc.) and returns an object (books) that will be available to our BookList component (as this.props.books)
function mapStateToProps(state){
    //Returns object to be used by our BookList component - Takes the book list from our Application state and stores it as an object (this.props.books), Object = Key (books)/Value (state.books), this object will be reassigned to the component (as this.props.books) whenever the container is rerendered
    return{
        books: state.books
    };
}

//Maps Action Creator to container - Result of this function will end up as props on BookList container
function mapDispatchToProps(dispatch) {
    //Passes result of the Action Creator (selectBook) to our reducers - selectBook = Action Creator we imported at the top, "dispatch" takes Actions and pushes them to all the different reducers, "selectBook" = key and value can call "this.props.selectBook" (which will call the Action Creator), "bindActionCreators" - takes the JS object from selectBook and makes it flow through reducers 
    return bindActionCreators({ selectBook: selectBook}, dispatch);
}

//Promotes BookList from Component to Container - Connects React <-> Redux, Takes functions and a component and produces a container, if our App state changes our container (BookList) will automatically rerender with new list of books, "mapDispatchToProps" informs about new disptach method and make it available as a .prop
export default connect(mapStateToProps, mapDispatchToProps)(BookList);